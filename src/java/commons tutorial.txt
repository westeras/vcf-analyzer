package test1;
  
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.Parser;
import org.apache.commons.cli.PosixParser;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class test1 {

    private static final Log LOGGER = LogFactory.getLog(SampleCLI.class);

    private static final String NL = System.getProperty("line.separator");

    private static Options createCommandLineOptions() {
        final Options options = new Options();
        options.addOption("port", true, "Mandatory parameter port for webserver.");
        options.addOption("id", true, "Mandatory parameter process id of JVM.");
        options.addOption("help", false, "Show help information.");
        options.addOption("details", false, "Do a detailed analysis.");
        options.addOption("filter", true, "Just classes which have a package " 
                + "name which starts with the string "
                + "of the package filter will be recorded.");
        options.addOption("jar_files", true, "Scan jar files.");
        return options;
    }

    private static void outputCommandLineHelp(final Options options) {
        final HelpFormatter formater = new HelpFormatter();
        formater.printHelp("The SampleCLI demonstrates the use of CLI.", options);
    }

    private static void processCommandline(final CommandLine cl) throws IllegalArgumentException {
        if ((null != cl) && cl.hasOption("port")) {
            // do something with port
        }
        if ((null != cl) && cl.hasOption("id")) {
            // do something with id
        }
        if ((null != cl) && cl.hasOption("filter")) {
            // do something with filter
        }
        if ((null != cl) && cl.hasOption("details")) {
            // do something with details
        }
        if ((null != cl) && cl.hasOption("jar_files")) {
            // do something with jar_files
        }
    }

    public static void main(final String[] args) {
        // Parse command line
        final Parser commandlineparser = new PosixParser();
        final Options options = createCommandLineOptions();
        CommandLine cl = null;
        try {
            cl = commandlineparser.parse(options, args, true);
        } catch (final ParseException exp) {
            LOGGER.error("Unexpected exception:" + exp.getMessage() + NL);
        }
        // Process command line and store parameter in attributes
        try {
            if (null != cl) {
                processCommandline(cl);
            }
        } catch (final IllegalArgumentException e) {
            outputCommandLineHelp(options);
            LOGGER.warn("Illegal arguments on command line: " + e.getMessage() + NL);
            return;
        }
        if ((null != cl) && cl.hasOption("help") || args.length < 1) {
            outputCommandLineHelp(options);
            return;
        }
        // do something ...        
    }
}